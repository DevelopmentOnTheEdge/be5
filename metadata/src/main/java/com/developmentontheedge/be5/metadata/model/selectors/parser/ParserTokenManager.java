/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.developmentontheedge.be5.metadata.model.selectors.parser;

import com.developmentontheedge.be5.metadata.model.selectors.SelectorUtils;

/**
 * Token Manager.
 */
@SuppressWarnings("unused")
public class ParserTokenManager implements ParserConstants
{

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds)
    {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0)
    {
        switch (pos)
        {
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0)
    {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0()
    {
        switch (curChar)
        {
            case 35:
                return jjStopAtPos(0, 17);
            case 41:
                return jjStopAtPos(0, 18);
            case 46:
                return jjStopAtPos(0, 16);
            case 58:
                return jjMoveStringLiteralDfa1_0(0x600000L);
            case 91:
                return jjStopAtPos(0, 19);
            case 93:
                return jjStopAtPos(0, 20);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0)
    {
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar)
        {
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar)
        {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar)
        {
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar)
        {
            case 40:
                if ((active0 & 0x200000L) != 0L)
                    return jjStopAtPos(4, 21);
                break;
            case 99:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar)
        {
            case 104:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar)
        {
            case 101:
                return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar)
        {
            case 115:
                return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try
        {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e)
        {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar)
        {
            case 40:
                if ((active0 & 0x400000L) != 0L)
                    return jjStopAtPos(8, 22);
                break;
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    static final long[] jjbitVec0 = {
            0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos)
    {
        int startsAt = 0;
        jjnewStateCnt = 63;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; )
        {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64)
            {
                long l = 1L << curChar;
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                            if ((0x100003600L & l) != 0L)
                            {
                                if (kind > 1)
                                    kind = 1;
                                {
                                    jjCheckNAddStates(0, 2);
                                }
                            }
                            else if (curChar == 44)
                            {
                                if (kind > 15)
                                    kind = 15;
                            }
                            else if (curChar == 61)
                            {
                                if (kind > 14)
                                    kind = 14;
                            }
                            else if (curChar == 42)
                            {
                                jjCheckNAdd(54);
                            }
                            else if (curChar == 36)
                            {
                                jjCheckNAdd(54);
                            }
                            else if (curChar == 39)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            else if (curChar == 34)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            else if (curChar == 45)
                            {
                                jjAddStates(9, 10);
                            }
                            break;
                        case 2:
                            if ((0x3ff200000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 4:
                            if ((0xfc00ffffffffcbffL & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 5:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(11, 15);
                        }
                        break;
                        case 6:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(16, 20);
                        }
                        break;
                        case 7:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(21, 25);
                        }
                        break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(26, 30);
                        }
                        break;
                        case 9:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(31, 35);
                        }
                        break;
                        case 10:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(36, 39);
                        }
                        break;
                        case 11:
                            if (curChar != 10)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 12:
                        case 21:
                            if (curChar == 13)
                            {
                                jjCheckNAdd(11);
                            }
                            break;
                        case 13:
                            if ((0x100003600L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(40, 44);
                        }
                        break;
                        case 16:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(45, 49);
                        }
                        break;
                        case 17:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(50, 54);
                        }
                        break;
                        case 18:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(55, 59);
                        }
                        break;
                        case 19:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(60, 64);
                        }
                        break;
                        case 20:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(65, 68);
                        }
                        break;
                        case 22:
                            if (curChar == 34)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 23:
                            if ((0xfffffffbffffcbffL & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 24:
                            if (curChar == 34 && kind > 13)
                                kind = 13;
                            break;
                        case 26:
                            if ((0x3400L & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 27:
                            if (curChar == 10)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 28:
                        case 36:
                            if (curChar == 13)
                            {
                                jjCheckNAdd(27);
                            }
                            break;
                        case 29:
                            if ((0xfc00ffffffffcbffL & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 30:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(69, 74);
                            }
                            break;
                        case 31:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(75, 80);
                            }
                            break;
                        case 32:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(81, 86);
                            }
                            break;
                        case 33:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(87, 92);
                            }
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(93, 98);
                            }
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(99, 103);
                            }
                            break;
                        case 37:
                            if ((0x100003600L & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 38:
                            if (curChar == 39)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 39:
                            if ((0xffffff7fffffcbffL & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 40:
                            if (curChar == 39 && kind > 13)
                                kind = 13;
                            break;
                        case 42:
                            if ((0x3400L & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 43:
                            if (curChar == 10)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 44:
                        case 52:
                            if (curChar == 13)
                            {
                                jjCheckNAdd(43);
                            }
                            break;
                        case 45:
                            if ((0xfc00ffffffffcbffL & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 46:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(104, 109);
                            }
                            break;
                        case 47:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(110, 115);
                            }
                            break;
                        case 48:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(116, 121);
                            }
                            break;
                        case 49:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(122, 127);
                            }
                            break;
                        case 50:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(128, 133);
                            }
                            break;
                        case 51:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                jjCheckNAddStates(134, 138);
                            }
                            break;
                        case 53:
                            if ((0x100003600L & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 54:
                            if (curChar == 61 && kind > 14)
                                kind = 14;
                            break;
                        case 56:
                            if (curChar == 36)
                            {
                                jjCheckNAdd(54);
                            }
                            break;
                        case 57:
                            if (curChar == 42)
                            {
                                jjCheckNAdd(54);
                            }
                            break;
                        case 58:
                            if (curChar == 61 && kind > 14)
                                kind = 14;
                            break;
                        case 59:
                            if (curChar == 44 && kind > 15)
                                kind = 15;
                            break;
                        case 60:
                            if ((0x100003600L & l) == 0L)
                                break;
                            if (kind > 1)
                                kind = 1;
                        {
                            jjCheckNAddStates(0, 2);
                        }
                        break;
                        case 61:
                            if ((0x100003600L & l) == 0L)
                                break;
                            if (kind > 1)
                                kind = 1;
                        {
                            jjCheckNAdd(61);
                        }
                        break;
                        case 62:
                            if ((0x100003600L & l) != 0L)
                            {
                                jjCheckNAddTwoStates(62, 59);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                            {
                                if (kind > 12)
                                    kind = 12;
                                {
                                    jjCheckNAddTwoStates(2, 3);
                                }
                            }
                            else if (curChar == 92)
                            {
                                jjCheckNAddTwoStates(4, 15);
                            }
                            else if (curChar == 94)
                                jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        case 1:
                        case 2:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 3:
                            if (curChar == 92)
                            {
                                jjCheckNAddTwoStates(4, 5);
                            }
                            break;
                        case 4:
                            if ((0xffffff81ffffffffL & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 5:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(11, 15);
                        }
                        break;
                        case 6:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(16, 20);
                        }
                        break;
                        case 7:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(21, 25);
                        }
                        break;
                        case 8:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(26, 30);
                        }
                        break;
                        case 9:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(31, 35);
                        }
                        break;
                        case 10:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(36, 39);
                        }
                        break;
                        case 14:
                            if (curChar == 92)
                            {
                                jjCheckNAddTwoStates(4, 15);
                            }
                            break;
                        case 15:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(40, 44);
                        }
                        break;
                        case 16:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(45, 49);
                        }
                        break;
                        case 17:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(50, 54);
                        }
                        break;
                        case 18:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(55, 59);
                        }
                        break;
                        case 19:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(60, 64);
                        }
                        break;
                        case 20:
                            if ((0x7e00000000L & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddStates(65, 68);
                        }
                        break;
                        case 23:
                            if ((0xffffffffefffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 25:
                            if (curChar == 92)
                            {
                                jjAddStates(139, 142);
                            }
                            break;
                        case 29:
                            if ((0xffffff81ffffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 30:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(69, 74);
                            }
                            break;
                        case 31:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(75, 80);
                            }
                            break;
                        case 32:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(81, 86);
                            }
                            break;
                        case 33:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(87, 92);
                            }
                            break;
                        case 34:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(93, 98);
                            }
                            break;
                        case 35:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(99, 103);
                            }
                            break;
                        case 39:
                            if ((0xffffffffefffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 41:
                            if (curChar == 92)
                            {
                                jjAddStates(143, 146);
                            }
                            break;
                        case 45:
                            if ((0xffffff81ffffffffL & l) != 0L)
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        case 46:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(104, 109);
                            }
                            break;
                        case 47:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(110, 115);
                            }
                            break;
                        case 48:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(116, 121);
                            }
                            break;
                        case 49:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(122, 127);
                            }
                            break;
                        case 50:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(128, 133);
                            }
                            break;
                        case 51:
                            if ((0x7e00000000L & l) != 0L)
                            {
                                jjCheckNAddStates(134, 138);
                            }
                            break;
                        case 55:
                            if (curChar == 94)
                                jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            else
            {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do
                {
                    switch (jjstateSet[--i])
                    {
                        case 0:
                        case 1:
                        case 2:
                        case 4:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 12)
                                kind = 12;
                        {
                            jjCheckNAddTwoStates(2, 3);
                        }
                        break;
                        case 23:
                        case 29:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            {
                                jjCheckNAddStates(6, 8);
                            }
                            break;
                        case 39:
                        case 45:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                            {
                                jjCheckNAddStates(3, 5);
                            }
                            break;
                        default:
                            if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
                            else break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
                return curPos;
            try
            {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e)
            {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            61, 62, 59, 39, 40, 41, 23, 24, 25, 1, 14, 2, 6, 12, 13, 3,
            2, 7, 12, 13, 3, 2, 8, 12, 13, 3, 2, 9, 12, 13, 3, 2,
            10, 12, 13, 3, 2, 12, 13, 3, 16, 21, 13, 2, 3, 17, 21, 13,
            2, 3, 18, 21, 13, 2, 3, 19, 21, 13, 2, 3, 20, 21, 13, 2,
            3, 21, 13, 2, 3, 23, 31, 36, 37, 24, 25, 23, 32, 36, 37, 24,
            25, 23, 33, 36, 37, 24, 25, 23, 34, 36, 37, 24, 25, 23, 35, 36,
            37, 24, 25, 23, 36, 37, 24, 25, 39, 47, 52, 53, 40, 41, 39, 48,
            52, 53, 40, 41, 39, 49, 52, 53, 40, 41, 39, 50, 52, 53, 40, 41,
            39, 51, 52, 53, 40, 41, 39, 52, 53, 40, 41, 26, 28, 29, 30, 42,
            44, 45, 46,
    };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
    {
        switch (hiByte)
        {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, "\56", "\43", "\51", "\133", "\135", "\72\156\157\164\50",
            "\72\155\141\164\143\150\145\163\50",};

    protected Token jjFillToken()
    {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken()
    {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; )
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch (Exception e)
            {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                matchedToken = jjFillToken();
                TokenLexicalActions(matchedToken);
                return matchedToken;
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try
            {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1)
            {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r')
                {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen)
            {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void TokenLexicalActions(Token matchedToken)
    {
        switch (jjmatchedKind)
        {
            case 12:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = SelectorUtils.unescape(image.toString());
                break;
            case 13:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = SelectorUtils.unescape(image.toString());
                break;
            case 14:
                image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                matchedToken.image = image.substring(0, image.length() - 1);
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end)
    {
        do
        {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end)
    {
        do
        {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /**
     * Constructor.
     */
    public ParserTokenManager(SimpleCharStream stream)
    {

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public ParserTokenManager(SimpleCharStream stream, int lexState)
    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream)
    {

        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 63; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState)
    {

        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[63];
    private final int[] jjstateSet = new int[2 * 63];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;

    protected int curChar;
}
