# This file contains SQL queries used for access to metadata via SQL queries.
# for DB specific queries use platform suffix, for example .mysql

# Synchronization: cache Ids
sql.select.queries=SELECT q.ID,q.table_name,q.name FROM queries q JOIN entities e ON e.name=q.table_name WHERE q.name!='Lost records'
sql.select.operations=SELECT o.ID,o.table_name,o.name FROM operations o JOIN entities e ON e.name=o.table_name WHERE o.name!='Undelete'

# Synchronization: roles
sql.delete.roles=DELETE FROM roles
sql.insert.role=INSERT INTO roles VALUES('?')

# Synchronization: entity
sql.insert.entity=\
INSERT INTO entities(name, displayName, primaryKeyColumn, type, origin)\n\
VALUES('?', '?', '?', '?', '?')
sql.update.entity.displayName=UPDATE entities SET displayName='?' WHERE name='?'
sql.update.entity.primaryKey=UPDATE entities SET primaryKeyColumn='?' WHERE name='?'

# Synchronization: query
sql.insert.query=\
INSERT INTO queries(table_name, name, type, query, isInvisible, isSecure, isSlow, isCacheable, isReplicated, contextID, paramOperID, categoryID, shortDescription, messageWhenEmpty, wellKnownName, menuName, titleName, notSupported, newDataCheckQuery, origin)\n\
VALUES('?', '?', '?', '?', '?', '?', '?', '?', '?', ?, ?, ?, '?', '?', '?', '?', '?', '?', '?', '?')
sql.insert.query.oracle=\
INSERT INTO queries(table_name, name, type, query, isInvisible, isSecure, isSlow, isCacheable, isReplicated, contextID, paramOperID, categoryID, shortDescription, messageWhenEmpty, wellKnownName, menuName, titleName, notSupported, newDataCheckQuery, origin, ID)\n\
VALUES('?', '?', '?', '?', '?', '?', '?', '?', '?', ?, ?, ?, '?', '?', '?', '?', '?', '?', '?', '?', beIDGenerator.NEXTVAL)

sql.insert.query.id=\
INSERT INTO queries(table_name, name, type, query, isInvisible, isSecure, isSlow, isCacheable, isReplicated, contextID, paramOperID, categoryID, shortDescription, messageWhenEmpty, wellKnownName, menuName, titleName, notSupported, newDataCheckQuery, origin, ID)\n\
VALUES('?', '?', '?', '?', '?', '?', '?', '?', '?', ?, ?, ?, '?', '?', '?', '?', '?', '?', '?', '?', ?)

sql.insert.quickFilter=INSERT INTO quickFilterOptions(queryID,name,filter_param,filterQueryID,filteringClass,origin) VALUES(?,'?','?',?,'?','?')
sql.insert.quickFilter.oracle=INSERT INTO quickFilterOptions(ID, queryID,name,filter_param,filterQueryID,filteringClass,origin) VALUES(beIDGenerator.NEXTVAL, ?,'?','?',?,'?','?')

sql.insert.querySettings=INSERT INTO querySettings(queryID,role_name,maxRecordsPerPage,maxRecordsPerPrintPage,maxRecordsInDynamicDropDown,colorSchemeID,autoRefresh,beautifier)\
VALUES('?','?',?,?,?,?,?,'?')
sql.insert.querySettings.oracle=INSERT INTO querySettings(ID,queryID,role_name,maxRecordsPerPage,maxRecordsPerPrintPage,maxRecordsInDynamicDropDown,colorSchemeID,autoRefresh,beautifier)\
VALUES(beIDGenerator.NEXTVAL,?,'?',?,?,?,?,?,'?')

sql.query.mergeToId=UPDATE queries SET mergeToId=? WHERE ID=? 

sql.queries.per.role=INSERT INTO queries_per_role(queryID, role_name, isDefault) VALUES(?,'?','?')
sql.queries.per.role.oracle=INSERT INTO queries_per_role(ID, queryID, role_name, isDefault) VALUES(beIDGenerator.NEXTVAL, ?,'?','?')

sql.operations.per.query=INSERT INTO operations_per_query(operID, queryID) VALUES(?,?)

# Synchronization: operation
sql.insert.operation=INSERT INTO operations(table_name, name, type, code, requiredRecordSetSize, isSecure, isConfirm, logging, notSupported, origin)\n\
VALUES('?', '?', '?', '?', ?, '?', '?', '?', '?', '?')
sql.insert.operation.oracle=INSERT INTO operations(table_name, name, type, code, requiredRecordSetSize, isSecure, isConfirm, logging, notSupported, origin, ID)\n\
VALUES('?', '?', '?', '?', ?, '?', '?', '?', '?', '?', beIDGenerator.NEXTVAL)

sql.insert.operation.id=INSERT INTO operations(table_name, name, type, code, requiredRecordSetSize, isSecure, isConfirm, logging, notSupported, origin, ID)\n\
VALUES('?', '?', '?', '?', ?, '?', '?', '?', '?', '?', ?)

sql.insert.operation.extender=INSERT INTO operationExtension(table_name, operation_name, class_name, jsCode, invokeOrder, module_name)\n\
VALUES('?', '?', '?', '?', ?, '?')
sql.insert.operation.extender.oracle=INSERT INTO operationExtension(ID, table_name, operation_name, class_name, jsCode, invokeOrder, module_name)\n\
VALUES(beIDGenerator.NEXTVAL, '?', '?', '?', '?', ?, '?')

sql.operation.per.role=INSERT INTO operations_per_role VALUES(?,'?')

# Synchronization: remove queries
sql.remove.query.operations=DELETE FROM operations_per_query WHERE queryID IN &?
sql.remove.query.roles=DELETE FROM queries_per_role WHERE queryID IN &?
sql.remove.query.filters=DELETE FROM quickFilterOptions WHERE queryID IN &?
sql.remove.query.settings=DELETE FROM querySettings WHERE queryID IN &?
sql.remove.query=DELETE from queries WHERE ID IN &?

# Synchronization: remove operations
sql.remove.operation.roles=DELETE FROM operations_per_role WHERE operID IN &?
sql.remove.operation.extenders=DELETE FROM operationExtension WHERE table_name = '?' AND operation_name IN (SELECT name FROM operations WHERE ID in &?)
sql.remove.operation=DELETE FROM operations WHERE ID IN &?

# Synchronization: pagecustomization
sql.insert.pagecustomization.mysql=INSERT INTO pageCustomisation(origin,`key`,type,role,value) VALUES('?','?','?','?','?')
sql.insert.pagecustomization.oracle=INSERT INTO pageCustomisation(ID,origin,"key",type,role,value) VALUES(beIDGenerator.NEXTVAL,'?','?','?','?','?')
sql.insert.pagecustomization=INSERT INTO pageCustomisation(origin,"key",type,role,value) VALUES('?','?','?','?','?')
sql.delete.pagecustomization.mysql=DELETE FROM pageCustomisation WHERE `key`='?'
sql.delete.pagecustomization=DELETE FROM pageCustomisation WHERE "key"='?'

# Synchronization: static pages
sql.delete.staticPage=DELETE FROM staticPages WHERE lang='?' AND name='?'
sql.update.staticPage.postgres=UPDATE staticPages SET content='?', "whomodified___"='Administrator', "modificationdate___"=CURRENT_TIMESTAMP WHERE lang='?' AND name='?'
sql.update.staticPage.db2=UPDATE staticPages SET content='?', "WHOMODIFIED___"='Administrator', "MODIFICATIONDATE___"=CURRENT_TIMESTAMP WHERE lang='?' AND name='?'
sql.update.staticPage.oracle=UPDATE staticPages SET content='?', "WHOMODIFIED___"='Administrator', "MODIFICATIONDATE___"=SYSDATE WHERE lang='?' AND name='?'
sql.update.staticPage.mysql=UPDATE staticPages SET content='?', `whomodified___`='Administrator', `modificationdate___`=NOW() WHERE lang='?' AND name='?'
sql.update.staticPage.sqlserver=UPDATE staticPages SET content='?', "whomodified___"='Administrator', "modificationdate___"=GETDATE() WHERE lang='?' AND name='?'
sql.insert.staticPage.postgres=INSERT INTO staticPages(id,content,lang,name,"whoinserted___","whomodified___","creationdate___","modificationdate___") VALUES(?,'?','?','?','Administrator','Administrator',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP) 
sql.insert.staticPage.db2=INSERT INTO staticPages(id,content,lang,name,"WHOINSERTED___","WHOMODIFIED___","CREATIONDATE___","MODIFICATIONDATE___") VALUES(?,'?','?','?','Administrator','Administrator',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP) 
sql.insert.staticPage.oracle=INSERT INTO staticPages(id,content,lang,name,"whoinserted___","whomodified___","creationdate___","modificationdate___") VALUES(?,'?','?','?','Administrator','Administrator',SYSDATE,SYSDATE) 
sql.insert.staticPage.mysql=INSERT INTO staticPages(id,content,lang,name,`whoinserted___`,`whomodified___`,`creationdate___`,`modificationdate___`) VALUES(?,'?','?','?','Administrator','Administrator',NOW(),NOW())
sql.insert.staticPage.sqlserver=INSERT INTO staticPages(id,content,lang,name,"whoinserted___","whomodified___","creationdate___","modificationdate___") VALUES(?,'?','?','?','Administrator','Administrator',GETDATE(),GETDATE()) 

# Synchronization: remove entity
sql.delete.entity=DELETE FROM entities WHERE name = '?'

sql.delete.icon=DELETE FROM icons WHERE ownerID = '?'
sql.insert.icon=INSERT INTO icons(ownerID,name,mimeType,data,origin) VALUES('?','?','?',?,'?')
sql.insert.icon.oracle=INSERT INTO icons(ID,ownerID,name,mimeType,data,origin) VALUES(beIDGenerator.NEXTVAL,'?','?','?',?,'?')

sql.delete.jsform=DELETE FROM javascriptForms WHERE formname = '?'
sql.insert.jsform=INSERT INTO javascriptForms(formname,code) VALUES('?','?')

# Synchronization: daemons
sql.delete.daemon=DELETE FROM daemons WHERE name = '?'
sql.insert.daemon=INSERT INTO daemons(name,className,configSection,daemonType,description,slaveNo,origin) VALUES('?','?','?','?','?',?,'?')
sql.insert.daemon.oracle=INSERT INTO daemons(ID,name,className,configSection,daemonType,description,slaveNo,origin) VALUES(beIDGenerator.NEXTVAL,'?','?','?','?','?',?,'?')

# Synchronization: localization
sql.delete.lang.row=DELETE FROM localizedMessages WHERE langCode = '?' AND entity = '?' AND topic = '?' AND messagekey = '?'
sql.insert.localization=INSERT INTO localizedMessages(origin,langCode,entity,topic,messagekey,message) VALUES('?','?','?','?','?','?')
sql.insert.localization.oracle=INSERT INTO localizedMessages(ID,origin,langCode,entity,topic,messagekey,message) VALUES(beIDGenerator.NEXTVAL,'?','?','?','?','?','?')

# Synchronization: tableRef
sql.delete.tableref=DELETE FROM table_refs WHERE tableFrom = '?' AND columnsFrom = '?'
sql.delete.genericref=DELETE FROM generic_ref_entities WHERE tableFrom = '?' AND columnsFrom = '?'
sql.insert.tableref=INSERT INTO table_refs VALUES('?','?','?','?',?)
sql.insert.genericref=INSERT INTO generic_ref_entities VALUES('?','?','?')

# SqlServer-related
sql.enable.insert.identity=
sql.enable.insert.identity.sqlserver=SET IDENTITY_INSERT ? ON
sql.disable.insert.identity=
sql.disable.insert.identity.sqlserver=SET IDENTITY_INSERT ? OFF

# Test queries
sql.table.list.postgres  = SELECT tablename FROM pg_tables WHERE schemaname = 'public'
sql.table.list.mysql     = SHOW TABLES
sql.table.list.db2       = SELECT tabname FROM syscat.tables WHERE ownertype='U' ORDER BY 1
sql.table.list.oracle    = SELECT table_name FROM user_tables
sql.table.list.sqlserver = SELECT table_name FROM information_schema.tables WHERE table_schema='dbo'

sql.selectSchema.mysql = SELECT DATABASE()
sql.selectSchema.sqlserver = SELECT SCHEMA_NAME()

sql.select.not.in.range = SELECT 1 FROM ? WHERE NOT (? IN &?) LIMIT 1
sql.select.not.in.range.db2 = SELECT 1 FROM ? WHERE NOT (? IN &?)
sql.select.not.in.range.oracle = SELECT 1 FROM ? WHERE NOT (? IN &?)
sql.select.not.in.range.sqlserver = SELECT TOP 1 1 AS "test" FROM ? WHERE NOT (? IN &?)
sql.select.longer = SELECT 1 FROM ? WHERE LENGTH(?) > ? LIMIT 1
sql.select.longer.db2 = SELECT 1 FROM ? WHERE LENGTH(?) > ?
sql.select.longer.oracle = SELECT 1 FROM ? WHERE LENGTH(?) > ?
sql.select.longer.sqlserver = SELECT TOP 1 1 AS "test" FROM ? WHERE LEN(?) > ?

sql.selectAll = SELECT * FROM ?

# System settings
sql.delete.system.setting = DELETE FROM systemSettings WHERE section_name = '?' AND setting_name = '?'
sql.insert.system.setting = INSERT INTO systemSettings (section_name, setting_name, setting_value) VALUES ('?','?','?')

# SqlModelReader
selectAllEntities               = SELECT name, displayname, primarykeycolumn, type, origin FROM entities ORDER BY origin
selectAllQueries                = SELECT id, table_name, name, menuname, titlename, type, notsupported, query, "___hashQuery", newdatacheckquery, isinvisible, issecure, isslow, iscacheable, isreplicated, contextid, paramoperid, categoryid, mergetoid, shortdescription, messagewhenempty, wellknownname, origin FROM queries
selectAllQueries.mysql          = SELECT id, table_name, name, menuname, titlename, type, notsupported, query, ___hashQuery, newdatacheckquery, isinvisible, issecure, isslow, iscacheable, isreplicated, contextid, paramoperid, categoryid, mergetoid, shortdescription, messagewhenempty, wellknownname, origin FROM queries
selectAllOperations             = SELECT id, table_name, name, type, notsupported, code, "___hashCode", requiredrecordsetsize, executionpriority, logging, issecure, isconfirm, contextid, categoryid, wellknownname, origin FROM operations
selectAllOperations.mysql       = SELECT id, table_name, name, type, notsupported, code, ___hashCode, requiredrecordsetsize, executionpriority, logging, issecure, isconfirm, contextid, categoryid, wellknownname, origin FROM operations
selectAllRoles                  = SELECT role_name FROM roles
selectAllLocalizations          = SELECT origin, langCode, entity, messagekey, message, topic FROM localizedMessages ORDER BY origin, langCode, entity, messagekey, message
selectAllCustomizations.mysql   = SELECT origin, `key`, type, role, value FROM pageCustomisation
selectAllCustomizations         = SELECT origin, "key", type, role, value FROM pageCustomisation
selectAllDaemons                = SELECT id, name, className, configSection, daemonType, description, slaveNo, origin FROM daemons
selectAllStaticPages            = SELECT id, lang, name, content FROM staticPages
selectGenericRefEntities        = SELECT tablefrom, columnsfrom, tableto FROM generic_ref_entities
selectQueryRolePairs            = SELECT queryID, role_name, isDefault FROM queries_per_role
selectOperationRolePairs        = SELECT operID, role_name FROM operations_per_role
selectOperationQueryPairs       = SELECT operID, queryID FROM operations_per_query
selectOperationExtensions       = SELECT o.ID,e.role,e.module_name,e.class_name,e.jsCode,e.invokeOrder FROM operationExtension e JOIN operations o ON (o.table_name=e.table_name AND o.name=e.operation_name) ORDER BY 1,3,4
selectTableRefs                 = SELECT t.tableFrom,t.columnsFrom,t.tableTo,t.columnsTo,q.name FROM table_refs t JOIN entities e1 ON(t.tableFrom=e1.name) LEFT JOIN queries q ON(q.ID=t.selectionViewID) WHERE e1.origin='?'
selectQuickFilters              = SELECT f.queryID, f.filter_param, f.name, q.name, f.filteringClass, f.origin FROM quickFilterOptions f JOIN queries q ON (f.filterQueryID=q.ID)
selectQuerySettings             = SELECT queryID, role_name, maxRecordsPerPage, maxRecordsPerPrintPage, maxRecordsInDynamicDropDown, colorSchemeID, autoRefresh, beautifier FROM querySettings
selectIcons                     = SELECT ownerID,name,mimeType,data,origin FROM icons 
selectJavaScriptForms           = SELECT formName,code FROM javascriptForms

sql.getTableDefinition.mysql = SHOW CREATE TABLE ?

# CompareDatabaseTest
test.operations_per_query.mysql = SELECT CONCAT(q.table_name,'|',q.name,'|',o.name),1 \
    FROM operations_per_query opq JOIN operations o ON(o.ID=opq.operID) JOIN queries q ON (q.ID=opq.queryID)
test.operations_per_query.sqlserver = SELECT q.table_name + '|' + q.name + '|' + o.name,1 \
    FROM operations_per_query opq JOIN operations o ON(o.ID=opq.operID) JOIN queries q ON (q.ID=opq.queryID)
test.operations_per_query = SELECT q.table_name || '|' || q.name || '|' || o.name,1 \
    FROM operations_per_query opq JOIN operations o ON(o.ID=opq.operID) JOIN queries q ON (q.ID=opq.queryID)

test.operations_per_role.mysql = SELECT CONCAT(o.table_name,'|',o.name,'|',opr.role_name),1 \
    FROM operations_per_role opr JOIN operations o ON(o.ID=opr.operID)
test.operations_per_role.sqlserver = SELECT o.table_name + '|' + o.name + '|' + opr.role_name,1 \
    FROM operations_per_role opr JOIN operations o ON(o.ID=opr.operID)
test.operations_per_role = SELECT o.table_name || '|' || o.name || '|' || opr.role_name,1 \
    FROM operations_per_role opr JOIN operations o ON(o.ID=opr.operID)

test.queries_per_role.mysql = SELECT CONCAT(q.table_name,'|',q.name,'|',qpr.role_name),isDefault,isCategorizedOnly \
    FROM queries_per_role qpr JOIN queries q ON(q.ID=qpr.queryID)
test.queries_per_role.sqlserver = SELECT q.table_name + '|' + q.name + '|' + qpr.role_name,isDefault,isCategorizedOnly \
    FROM queries_per_role qpr JOIN queries q ON(q.ID=qpr.queryID)
test.queries_per_role = SELECT q.table_name || '|' || q.name || '|' || qpr.role_name,isDefault,isCategorizedOnly \
    FROM queries_per_role qpr JOIN queries q ON(q.ID=qpr.queryID)

test.queries_per_user.mysql = SELECT CONCAT(q.table_name,'|',q.name),user_name,isdefault,iscategorizedonly FROM queries_per_user qpu JOIN queries q ON(q.id=qpu.queryID)
test.queries_per_user.sqlserver = SELECT q.table_name + '|' + q.name,user_name,isdefault,iscategorizedonly FROM queries_per_user qpu JOIN queries q ON(q.id=qpu.queryID)
test.queries_per_user = SELECT q.table_name || '|' || q.name,user_name,isdefault,iscategorizedonly FROM queries_per_user qpu JOIN queries q ON(q.id=qpu.queryID)

test.entities = SELECT name,displayname,primarykeycolumn,type,origin FROM entities

test.icons = SELECT ownerid,name,mimetype,origin,MD5(data) FROM icons
test.icons.sqlserver = SELECT ownerid,name,mimetype,origin,HASHBYTES('md5', CONVERT(VARBINARY,data)) FROM icons
test.icons.db2 = SELECT ownerid,name,mimetype,origin,hex(substr(data,100,100)) FROM icons
test.icons.oracle = SELECT ownerid,name,mimetype,origin,UTL_RAW.CAST_TO_RAW(DBMS_OBFUSCATION_TOOLKIT.MD5(input => dbms_lob.substr(data, 2000, 1))) FROM icons

test.daemons = SELECT name,classname,daemontype,slaveNo,description,configSection,origin FROM daemons

test.localizedmessages.mysql = SELECT CONCAT(entity,'|',topic,'|',messagekey,'|',langcode,'|',message,'|',origin),1 FROM localizedmessages ORDER BY 1
test.localizedmessages.sqlserver = SELECT entity + '|' + topic + '|' + messagekey + '|' + langcode + '|' + message + '|' + origin,1 FROM localizedmessages ORDER BY 1
test.localizedmessages = SELECT entity || '|' || topic || '|' || messagekey || '|' || langcode || '|' || message || '|' || origin,1 FROM localizedmessages ORDER BY 1

test.operations.mysql = SELECT CONCAT(o.table_name,'|',o.name),o.type,o.notSupported,o.code,o.___hashCode,o.requiredRecordSetSize,\
    o.executionPriority,o.logging,o.isSecure,o.isConfirm,o.wellKnownName,c.name,cat.name \
    FROM operations o LEFT JOIN contexts c ON (c.ID=o.contextID) LEFT JOIN categories cat ON (c.ID=o.categoryID)
test.operations.sqlserver = SELECT o.table_name + '|' + o.name,o.type,o.notSupported,o.code,o."___hashCode",o.requiredRecordSetSize,\
    o.executionPriority,o.logging,o.isSecure,o.isConfirm,o.wellKnownName,c.name,cat.name \
    FROM operations o LEFT JOIN contexts c ON (c.ID=o.contextID) LEFT JOIN categories cat ON (c.ID=o.categoryID)
test.operations = SELECT o.table_name || '|' || o.name,o.type,o.notSupported,o.code,o."___hashCode",o.requiredRecordSetSize,\
    o.executionPriority,o.logging,o.isSecure,o.isConfirm,o.wellKnownName,c.name,cat.name \
    FROM operations o LEFT JOIN contexts c ON (c.ID=o.contextID) LEFT JOIN categories cat ON (c.ID=o.categoryID)

test.queries.mysql = SELECT CONCAT(q.table_name,'|',q.name),q.menuName,q.titleName,q.type,q.notSupported,q.query,q.___hashQuery,q.newDataCheckQuery,\
    q.isInvisible,q.isSecure,q.isSlow,q.isCacheable,q.isReplicated,po.name,q.shortDescription,q.messageWhenEmpty,q.wellKnownName,\
    c.name,cat.name,q2.name \
    FROM queries q LEFT JOIN operations po ON (po.ID=q.paramOperID) \
    LEFT JOIN contexts c ON (c.ID=q.contextID) LEFT JOIN categories cat ON (c.ID=q.categoryID)\
    LEFT JOIN queries q2 ON (q2.ID=q.mergeToID)
test.queries.sqlserver = SELECT q.table_name + '|' + q.name,q.menuName,q.titleName,q.type,q.notSupported,q.query,q."___hashQuery",q.newDataCheckQuery,\
    q.isInvisible,q.isSecure,q.isSlow,q.isCacheable,q.isReplicated,po.name,q.shortDescription,q.messageWhenEmpty,q.wellKnownName,\
    c.name,cat.name,q2.name \
    FROM queries q LEFT JOIN operations po ON (po.ID=q.paramOperID) \
    LEFT JOIN contexts c ON (c.ID=q.contextID) LEFT JOIN categories cat ON (c.ID=q.categoryID)\
    LEFT JOIN queries q2 ON (q2.ID=q.mergeToID)
test.queries = SELECT q.table_name || '|' || q.name,q.menuName,q.titleName,q.type,q.notSupported,q.query,q."___hashQuery",q.newDataCheckQuery,\
    q.isInvisible,q.isSecure,q.isSlow,q.isCacheable,q.isReplicated,po.name,q.shortDescription,q.messageWhenEmpty,q.wellKnownName,\
    c.name,cat.name,q2.name \
    FROM queries q LEFT JOIN operations po ON (po.ID=q.paramOperID) \
    LEFT JOIN contexts c ON (c.ID=q.contextID) LEFT JOIN categories cat ON (c.ID=q.categoryID)\
    LEFT JOIN queries q2 ON (q2.ID=q.mergeToID)

test.table_refs.mysql = SELECT CONCAT(tableFrom,'|',columnsFrom,'|',COALESCE(tableTo,'NULL')),columnsTo,name \
    FROM table_refs r LEFT JOIN queries q ON(r.selectionViewID=q.ID)
test.table_refs.sqlserver = SELECT tableFrom + '|' + columnsFrom + '|' + COALESCE(tableTo,'NULL'),columnsTo,name \
    FROM table_refs r LEFT JOIN queries q ON(r.selectionViewID=q.ID)
test.table_refs = SELECT tableFrom || '|' || columnsFrom || '|' || COALESCE(tableTo,'NULL'),columnsTo,name \
    FROM table_refs r LEFT JOIN queries q ON(r.selectionViewID=q.ID)
    
test.querysettings.mysql = SELECT CONCAT(q.table_name,'|',q.name,'|',COALESCE(role_name,'null'),'|',COALESCE(user_name,'null')),\
    maxRecordsPerPage,maxRecordsPerPrintPage,maxRecordsInDynamicDropDown,colorSchemeID,autoRefresh,beautifier \
    FROM querysettings qs LEFT JOIN queries q ON (qs.queryID=q.ID)
test.querysettings.sqlserver = SELECT q.table_name + '|' + q.name + '|' + COALESCE(role_name,'null') + '|' + COALESCE(user_name,'null'),\
    maxRecordsPerPage,maxRecordsPerPrintPage,maxRecordsInDynamicDropDown,colorSchemeID,autoRefresh,beautifier \
    FROM querysettings qs LEFT JOIN queries q ON (qs.queryID=q.ID)
test.querysettings = SELECT q.table_name || '|' || q.name || '|' || COALESCE(role_name,'null') || '|' || COALESCE(user_name,'null'),\
    maxRecordsPerPage,maxRecordsPerPrintPage,maxRecordsInDynamicDropDown,colorSchemeID,autoRefresh,beautifier \
    FROM querysettings qs LEFT JOIN queries q ON (qs.queryID=q.ID)
    
test.quickfilteroptions.mysql = SELECT CONCAT(q1.table_name,'|',q1.name,'|',qfo.filter_param),q2.name,qfo.name,qfo.filteringClass,qfo.origin \
    FROM quickfilteroptions qfo JOIN queries q1 ON (qfo.queryID=q1.ID) JOIN queries q2 ON (qfo.filterQueryID=q2.ID)
test.quickfilteroptions.sqlserver = SELECT q1.table_name + '|' + q1.name + '|' + qfo.filter_param,q2.name,qfo.filter_param,qfo.name,qfo.filteringClass,qfo.origin \
    FROM quickfilteroptions qfo JOIN queries q1 ON (qfo.queryID=q1.ID) JOIN queries q2 ON (qfo.filterQueryID=q2.ID)
test.quickfilteroptions = SELECT q1.table_name || '|' || q1.name || '|' || qfo.filter_param,q2.name,qfo.filter_param,qfo.name,qfo.filteringClass,qfo.origin \
    FROM quickfilteroptions qfo JOIN queries q1 ON (qfo.queryID=q1.ID) JOIN queries q2 ON (qfo.filterQueryID=q2.ID)
    
test.operationextension.mysql = SELECT CONCAT(table_name,'|',operation_name,'|',class_name),role,module_name,jsCode \
    FROM operationExtension
test.operationextension.sqlserver = SELECT table_name + '|' + operation_name + '|' + class_name,role,module_name,jsCode \
    FROM operationExtension
test.operationextension = SELECT table_name || '|' || operation_name || '|' || class_name,role,module_name,jsCode \
    FROM operationExtension
    
test.pagecustomisation.mysql = SELECT CASE WHEN role is NULL THEN `key` ELSE CONCAT(`key`,'|',role) END,type,value FROM pageCustomisation
test.pagecustomisation.sqlserver = SELECT CASE WHEN role is NULL THEN "key" ELSE "key" + '|' + role END,type,value FROM pageCustomisation
test.pagecustomisation = SELECT CASE WHEN role is NULL THEN "key" ELSE "key" || '|' || role END,type,value FROM pageCustomisation

test.javascriptforms = SELECT formName,md5(code) FROM javascriptForms
test.javascriptforms.db2 = SELECT formName,code FROM javascriptForms
test.javascriptforms.sqlserver = SELECT formName,HASHBYTES('md5', CONVERT(VARBINARY,code)) FROM javascriptForms
test.javascriptforms.oracle = SELECT formName,UTL_RAW.CAST_TO_RAW(DBMS_OBFUSCATION_TOOLKIT.MD5(input => dbms_lob.substr(code, 2000, 1))) FROM javascriptForms

test.staticpages.mysql = SELECT CONCAT(name,'|',lang),content FROM staticPages
test.staticpages.sqlserver = SELECT name + '|' + lang,content FROM staticPages
test.staticpages = SELECT name || '|' || lang,content FROM staticPages

test.javascripthandlers.mysql = SELECT CONCAT(name,'|',code),algorithmCode FROM javaScriptHandlers
test.javascripthandlers.sqlserver = SELECT name + '|' + code,algorithmCode FROM javaScriptHandlers
test.javascripthandlers = SELECT name || '|' || code,algorithmCode FROM javaScriptHandlers

test.categories.mysql = SELECT CONCAT(c1.entity,'.',c1.name,'->',CASE WHEN c2.entity IS NULL THEN 'null' ELSE CONCAT(c2.entity,'.',c2.name) END),c1.description from categories c1 LEFT JOIN categories c2 ON(c2.parentid=c1.id)
test.categories.sqlserver = SELECT c1.entity + '.' + c1.name + '->' + (CASE WHEN c2.entity IS NULL THEN 'null' ELSE c2.entity + '.' + c2.name END),c1.description FROM categories c1 LEFT JOIN categories c2 ON(c2.parentid=c1.id)
test.categories = SELECT c1.entity || '.' || c1.name || '->' || (CASE WHEN c2.entity IS NULL THEN 'null' ELSE c2.entity || '.' || c2.name END),c1.description FROM categories c1 LEFT JOIN categories c2 ON(c2.parentid=c1.id)

test.classifications = select c.recordID,cat.entity,cat.name,c.importID from classifications c join categories cat on (c.categoryid=cat.id)
test.classifications.mysql = select c.recordID,cat.entity,cat.name from classifications c join categories cat on (c.categoryid=cat.id)

test.roles = SELECT role_name,1 FROM roles

test.systemSettings.mysql = SELECT CONCAT(section_name,'|',setting_name),setting_value FROM systemSettings
test.systemSettings.sqlserver = SELECT section_name + '|' + setting_name,setting_value FROM systemSettings
test.systemSettings = SELECT section_name || '|' || setting_name,setting_value FROM systemSettings

test.generic_ref_entities.mysql = SELECT CONCAT(tablefrom,'|',columnsfrom,'|',tableto),1 FROM generic_ref_entities
test.generic_ref_entities.sqlserver = SELECT tablefrom + '|' + columnsfrom + '|' + tableto,1 FROM generic_ref_entities
test.generic_ref_entities = SELECT tablefrom || '|' || columnsfrom || '|' || tableto,1 FROM generic_ref_entities

test.attributes.mysql = SELECT publicid, groupid, entity, name, description, type, dictionary, `table`, mirrortable, viewqueryname, collectionviewname, field, reffield, refentity, defaultvalue, canbenull, ishistorical, isforreporting, hidden, isexpert, calcexpression, classname, ordernum, whoinserted___ from attributes
test.attributes = SELECT publicid, groupid, entity, name, description, type, dictionary, "table", mirrortable, viewqueryname, collectionviewname, field, reffield, refentity, defaultvalue, canbenull, ishistorical, isforreporting, hidden, isexpert, calcexpression, classname, ordernum, whoinserted___ from attributes
